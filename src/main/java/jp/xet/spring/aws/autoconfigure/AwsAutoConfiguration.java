/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jp.xet.spring.aws.autoconfigure;

import java.lang.reflect.UndeclaredThrowableException;

import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import com.amazonaws.ClientConfiguration;

/**
 * Spring auto-configuration for AWS Clients.
 * 
 * <p>See {@code META-INF/aws.builders}</p>
 * 
 * <ul>
 *     <li>{@code aws.<service-package-name>[-async].client.<property>} - the {@link ClientConfiguration} to be used
 *         by the client. (ClientConfiguration)</li>
 *     <li>{@code aws.<service-package-name>[-async].endpoint.service-endpoint} - The service endpoint either with
 *         or without the protocol (e.g. https://sns.us-west-1.amazonaws.com or sns.us-west-1.amazonaws.com) (string)</li>
 *     <li>{@code aws.<service-package-name>[-async].endpoint.signing-region} - the region to use
 *         for SigV4 signing of requests (e.g. us-west-1) (string)</li>
 *     <li>{@code aws.<service-package-name>[-async].region} - the region to be used by the client.
 *         This will be used to determine both the service endpoint (eg: https://sns.us-west-1.amazonaws.com)
 *         and signing region (eg: us-west-1) for requests.
 *         This value is used only if any endpoint configuration is not set. (string)</li>
 *     <li>{@code aws.<service-package-name>[-async].enabled} - (boolean)</li>
 * </ul>
 * 
 * <h3>Default client configurations.</h3>
 * 
 * <ul>
 *     <li>{@code aws.default[-async].client.<property>} - the {@link ClientConfiguration} to be used
 *         by the client. (ClientConfiguration)</li>
 *     <li>{@code aws.default[-async].endpoint.service-endpoint} - The service endpoint either with
 *         or without the protocol (e.g. https://sns.us-west-1.amazonaws.com or sns.us-west-1.amazonaws.com) (string)</li>
 *     <li>{@code aws.default[-async].endpoint.signing-region} - the region to use
 *         for SigV4 signing of requests (e.g. us-west-1) (string)</li>
 *     <li>{@code aws.default[-async].region} - the region to be used by the client.
 *         This will be used to determine both the service endpoint (eg: https://sns.us-west-1.amazonaws.com)
 *         and signing region (eg: us-west-1) for requests.
 *         This value is used only if any endpoint configuration is not set. (string)</li>
 * </ul>
 * 
 * <h3>S3 client specific configurations.</h3>
 * 
 * <ul>
 *     <li>{@code aws.s3.path-style-access-enabled} - Configures the client to use path-style access
 *         for all requests. (boolean)</li>
 *     <li>{@code aws.s3.chunked-encoding-disabled} - Configures the client to disable chunked encoding
 *         for all requests. (boolean)</li>
 *     <li>{@code aws.s3.accelerate-mode-enabled} - Configures the client to use S3 accelerate endpoint
 *         for all requests. (boolean)</li>
 *     <li>{@code aws.s3.payload-signing-enabled} - Configures the client to sign payloads in all situations. (boolean)</li>
 *     <li>{@code aws.s3.dualstack-enabled} - Configures the client to use Amazon S3 dualstack mode
 *         for all requests. (boolean)</li>
 *     <li>{@code aws.s3.force-global-bucket-access-enabled} - Configure whether global bucket access is enabled
 *         for clients generated by this builder. (boolean)</li>
 * </ul>
 *
 * @author miyamoto.daisuke
 * @since #version#
 */
@Configuration
@Import(AwsClientBuilderConfiguration.class)
@Slf4j
@RequiredArgsConstructor
public class AwsAutoConfiguration implements InitializingBean {
	
	private final AwsClientBuilderConfiguration awsClientBuilderConfiguration;
	
	private final ConfigurableBeanFactory beanFactory;
	
	@Setter
	@Value("${aws.sync-enabled:true}")
	private boolean syncEnabled;
	
	@Setter
	@Value("${aws.async-enabled:false}")
	private boolean asyncEnabled;
	
	
	@Override
	public void afterPropertiesSet() throws Exception {
		if (syncEnabled == false) {
			log.debug("AWS sync client is disabled.");
		}
		if (asyncEnabled == false) {
			log.debug("AWS async client is disabled.");
		}
		AwsClientBuilderLoader.loadBuilderNames().forEach(this::registerAwsClient);
	}
	
	private void registerAwsClient(String builderClassName) {
		try {
			log.trace("Attempt to configure AWS client: {}", builderClassName);
			if (syncEnabled == false && builderClassName.endsWith("AsyncClientBuilder") == false) {
				log.trace("Skip {} -- sync client is disabled.", builderClassName);
				return;
			}
			if (asyncEnabled == false && builderClassName.endsWith("AsyncClientBuilder")) {
				log.trace("Skip {} -- async client is disabled", builderClassName);
				return;
			}
			if (awsClientBuilderConfiguration.isConfigurable(builderClassName) == false) {
				return;
			}
			
			Class<?> builderClass = Class.forName(builderClassName);
			Class<?> clientClass = AwsClientUtil.getClientClass(builderClass);
			
			if (beanFactory.containsBean(clientClass.getName())) {
				log.debug("Skip {} -- already configured", clientClass.getName());
				return;
			}
			
			Object builder = AwsClientUtil.createBuilder(builderClass);
			awsClientBuilderConfiguration.configureBuilder(builderClassName, clientClass, builder);
			Object client = AwsClientUtil.buildClient(builder);
			
			beanFactory.registerSingleton(clientClass.getName(), client);
			log.trace("AWS client {} is configured", clientClass.getName());
		} catch (ClassNotFoundException e) {
			log.trace("Skip.  Builder class is not found in classpath: {}", builderClassName);
			// ignore
		} catch (ClientDisabledException e) {
			log.debug("Skip.  Client auto-configuration is disabled: {}", builderClassName);
			// ignore
		} catch (ClientClassNotDeterminedException | IllegalStateException | UndeclaredThrowableException e) {
			log.error("Illegal builder: {}", builderClassName, e);
			throw e;
		}
	}
}
